{"ast":null,"code":"var _jsxFileName = \"/home/feli/Desktop/prog/posts/client/src/components/RutinaDetail.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useState } from 'react';\nimport axios from 'axios';\nimport ExerciseForm from './ExerciseForm';\nimport { apiService } from '../services/PostsService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RutinaDetail(ejercicios) {\n  _s();\n  const exercisesArray = ejercicios.props;\n  console.log(exercisesArray);\n  const [workoutData, setWorkoutData] = useState(exercisesArray.map(exercise => ({\n    exercise: exercise,\n    sets: [{\n      reps: '',\n      weight: ''\n    }]\n  })));\n  console.log(workoutData);\n  // Function to handle changes to any form input\n  useEffect(() => {\n    if (exercisesArray && exercisesArray.length > 0) {\n      setWorkoutData(exercisesArray.map(exercise => ({\n        exercise: exercise,\n        sets: [{\n          reps: '',\n          weight: ''\n        }]\n      })));\n    }\n  }, [exercisesArray]);\n  const handleChange = (exerciseIndex, setIndex, e) => {\n    setWorkoutData(prevWorkoutData => {\n      const newWorkoutData = [...prevWorkoutData];\n      newWorkoutData[exerciseIndex].sets[setIndex][e.target.name] = e.target.value;\n      return newWorkoutData;\n    });\n  };\n  const addSet = exerciseIndex => {\n    setWorkoutData(prevWorkoutData => {\n      const newWorkoutData = [...prevWorkoutData];\n      newWorkoutData[exerciseIndex].sets.push({\n        reps: '',\n        weight: ''\n      });\n      return newWorkoutData;\n    });\n  };\n\n  // Function to handle form submission\n  const handleSubmitAll = async e => {\n    e.preventDefault();\n    try {\n      // Send the entire workout data to the server\n\n      const dataToSend = workoutData.map(workout => {\n        return {\n          exercise: workout.exercise,\n          sets: workout.sets.map(set => {\n            return {\n              reps: Number(set.reps),\n              weight: Number(set.weight)\n            };\n          })\n        };\n      });\n\n      // Send the entire workout data to the server\n      const response = await apiService.PostData('/api/workouts', dataToSend);\n      console.log(response.data);\n      // Optionally, clear the form after submission\n    } catch (error) {\n      console.error('Error submitting workouts:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [workoutData.map((workout, exerciseIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: workout.exercise\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ExerciseForm, {\n        // Add a key prop\n        sets: workout.sets,\n        handleChange: (setIndex, e) => handleChange(exerciseIndex, setIndex, e),\n        addSet: () => addSet(exerciseIndex)\n      }, exerciseIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, exerciseIndex, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmitAll,\n      children: \"Submit All\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n_s(RutinaDetail, \"V6etM8gh23BpugeJ8IH520TptCM=\");\n_c = RutinaDetail;\nexport default RutinaDetail;\n{/*\n <h2>{ejercicio}</h2>\n      <form>\n      <input\n        type=\"number\"\n        name=\"sets\"\n        placeholder=\"Sets\"\n        value={formData.sets}\n        onChange={(e) => handleChange(index, e)}\n      />\n      <input\n        type=\"number\"\n        name=\"reps\"\n        placeholder=\"Reps\"\n        value={formData.reps}\n        onChange={(e) => handleChange(index, e)}\n      />\n      <input\n        type=\"number\"\n        name=\"weight\"\n        placeholder=\"Weight\"\n        value={formData.weight}\n        onChange={(e) => handleChange(index, e)}\n      />\n    </form>\n */}\n{/*import React, { useState } from 'react';\n import axios from 'axios';\n const FormEjercicios = ({ exercise, onChange, formData }) => {\n  return (\n    <form>\n      <input\n        type=\"number\"\n        name=\"sets\"\n        placeholder=\"Sets\"\n        value={formData.sets}\n        onChange={onChange}\n      />\n      <input\n        type=\"number\"\n        name=\"reps\"\n        placeholder=\"Reps\"\n        value={formData.reps}\n        onChange={onChange}\n      />\n      <input\n        type=\"number\"\n        name=\"weight\"\n        placeholder=\"Weight\"\n        value={formData.weight}\n        onChange={onChange}\n      />\n    </form>\n  );\n };\n \n function RutinaDetail({ ejercicios }) {\n  // Initialize state to hold form data for each exercise\n  const ejerciciosArray = ejercicios.props\n  \n  const [formData, setFormData] = useState(\n    ejerciciosArray.map(() => ({ sets: '', reps: '', weight: '' }))\n  );\n   // Function to handle changes to any form input\n  const handleChange = (index, e) => {\n    const newFormData = [...formData];\n    newFormData[index] = {\n      ...newFormData[index],\n      [e.target.name]: e.target.value\n    };\n    setFormData(newFormData);\n  };\n   // Function to handle form submission\n  const handleSubmitAll = async (e) => {\n    e.preventDefault();\n    try {\n      // Map over the exercises and form data to create an array of promises\n      const promises = ejerciciosArray.map((exercise, index) =>\n        axios.post('/api/workouts', {\n          exercise,\n          ...formData[index]\n        })\n      );\n      // Wait for all promises to resolve\n      const responses = await Promise.all(promises);\n      console.log(responses.map(res => res.data));\n      // Optionally, clear the form after submission\n      setFormData(formData.map(() => ({ sets: '', reps: '', weight: '' })));\n    } catch (error) {\n      console.error('Error submitting workouts:', error);\n    }\n  };\n   return (\n    <div>\n      {ejerciciosArray.map((ejercicio, index) => (\n        <div key={index}>\n          <h2>{ejercicio}</h2>\n          <FormEjercicios\n            exercise={ejercicio}\n            formData={formData[index]}\n            onChange={(e) => handleChange(index, e)}\n          />\n        </div>\n      ))}\n      <button onClick={handleSubmitAll}>Submit All</button>\n    </div>\n  );\n }\n export default RutinaDetail;*/}\nvar _c;\n$RefreshReg$(_c, \"RutinaDetail\");","map":{"version":3,"names":["React","useEffect","useState","axios","ExerciseForm","apiService","jsxDEV","_jsxDEV","RutinaDetail","ejercicios","_s","exercisesArray","props","console","log","workoutData","setWorkoutData","map","exercise","sets","reps","weight","length","handleChange","exerciseIndex","setIndex","e","prevWorkoutData","newWorkoutData","target","name","value","addSet","push","handleSubmitAll","preventDefault","dataToSend","workout","set","Number","response","PostData","data","error","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/feli/Desktop/prog/posts/client/src/components/RutinaDetail.jsx"],"sourcesContent":["import React, { useEffect } from 'react'\nimport { useState } from 'react';\nimport axios from 'axios';\nimport ExerciseForm from './ExerciseForm';\nimport { apiService } from '../services/PostsService';\n\nfunction RutinaDetail(ejercicios) {\n  const exercisesArray = ejercicios.props\n\n  console.log(exercisesArray)\n  \n  const [workoutData, setWorkoutData] = useState(\n    exercisesArray.map((exercise) => ({\n      exercise: exercise,\n      sets: [{ reps: '', weight: '' }]\n    }))\n  );\n  console.log(workoutData)\n  // Function to handle changes to any form input\n  useEffect(() => {\n    if (exercisesArray && exercisesArray.length > 0) {\n      setWorkoutData(\n        exercisesArray.map((exercise) => ({\n          exercise: exercise,\n          sets: [{ reps: '', weight: '' }]\n        }))\n      );\n    }\n  }, [exercisesArray]);\n  const handleChange = (exerciseIndex, setIndex, e) => {\n    setWorkoutData((prevWorkoutData) => {\n      const newWorkoutData = [...prevWorkoutData];\n      newWorkoutData[exerciseIndex].sets[setIndex][e.target.name] = e.target.value;\n      return newWorkoutData;\n    });\n  };\n\n  const addSet = (exerciseIndex) => {\n    setWorkoutData((prevWorkoutData) => {\n      const newWorkoutData = [...prevWorkoutData];\n      newWorkoutData[exerciseIndex].sets.push({ reps: '', weight: '' });\n      return newWorkoutData;\n    });\n  };\n\n  // Function to handle form submission\n  const handleSubmitAll = async (e) => {\n    e.preventDefault();\n    try {\n      // Send the entire workout data to the server\n\n      const dataToSend = workoutData.map((workout) => {\n        return {\n          exercise: workout.exercise,\n          sets: workout.sets.map((set) => {\n            return {\n              reps: Number(set.reps),\n              weight: Number(set.weight)\n            };\n          })\n        };\n      });\n  \n      // Send the entire workout data to the server\n      const response = await apiService.PostData('/api/workouts', dataToSend);\n  \n      console.log(response.data);\n      // Optionally, clear the form after submission\n      \n    } catch (error) {\n      console.error('Error submitting workouts:', error);\n    }\n  };\n\n  return (\n    <div>\n      {workoutData.map((workout, exerciseIndex) => (\n      <div key={exerciseIndex}>\n        <h2>{workout.exercise}</h2>\n        <ExerciseForm\n          key={exerciseIndex} // Add a key prop\n          sets={workout.sets}\n          handleChange={(setIndex, e) => handleChange(exerciseIndex, setIndex, e)}\n          addSet={() => addSet(exerciseIndex)}\n        />\n      </div>\n      \n      ))}\n\n      <button onClick={handleSubmitAll}>Submit All</button>\n    </div>\n  );\n}\n\nexport default RutinaDetail\n\n\n\n{/*\n<h2>{ejercicio}</h2>\n      <form>\n      <input\n        type=\"number\"\n        name=\"sets\"\n        placeholder=\"Sets\"\n        value={formData.sets}\n        onChange={(e) => handleChange(index, e)}\n      />\n      <input\n        type=\"number\"\n        name=\"reps\"\n        placeholder=\"Reps\"\n        value={formData.reps}\n        onChange={(e) => handleChange(index, e)}\n      />\n      <input\n        type=\"number\"\n        name=\"weight\"\n        placeholder=\"Weight\"\n        value={formData.weight}\n        onChange={(e) => handleChange(index, e)}\n      />\n    </form>\n*/}\n\n{/*import React, { useState } from 'react';\nimport axios from 'axios';\nconst FormEjercicios = ({ exercise, onChange, formData }) => {\n  return (\n    <form>\n      <input\n        type=\"number\"\n        name=\"sets\"\n        placeholder=\"Sets\"\n        value={formData.sets}\n        onChange={onChange}\n      />\n      <input\n        type=\"number\"\n        name=\"reps\"\n        placeholder=\"Reps\"\n        value={formData.reps}\n        onChange={onChange}\n      />\n      <input\n        type=\"number\"\n        name=\"weight\"\n        placeholder=\"Weight\"\n        value={formData.weight}\n        onChange={onChange}\n      />\n    </form>\n  );\n};\n\n\nfunction RutinaDetail({ ejercicios }) {\n  // Initialize state to hold form data for each exercise\n  const ejerciciosArray = ejercicios.props\n  \n  const [formData, setFormData] = useState(\n    ejerciciosArray.map(() => ({ sets: '', reps: '', weight: '' }))\n  );\n\n  // Function to handle changes to any form input\n  const handleChange = (index, e) => {\n    const newFormData = [...formData];\n    newFormData[index] = {\n      ...newFormData[index],\n      [e.target.name]: e.target.value\n    };\n    setFormData(newFormData);\n  };\n\n  // Function to handle form submission\n  const handleSubmitAll = async (e) => {\n    e.preventDefault();\n    try {\n      // Map over the exercises and form data to create an array of promises\n      const promises = ejerciciosArray.map((exercise, index) =>\n        axios.post('/api/workouts', {\n          exercise,\n          ...formData[index]\n        })\n      );\n      // Wait for all promises to resolve\n      const responses = await Promise.all(promises);\n      console.log(responses.map(res => res.data));\n      // Optionally, clear the form after submission\n      setFormData(formData.map(() => ({ sets: '', reps: '', weight: '' })));\n    } catch (error) {\n      console.error('Error submitting workouts:', error);\n    }\n  };\n\n  return (\n    <div>\n      {ejerciciosArray.map((ejercicio, index) => (\n        <div key={index}>\n          <h2>{ejercicio}</h2>\n          <FormEjercicios\n            exercise={ejercicio}\n            formData={formData[index]}\n            onChange={(e) => handleChange(index, e)}\n          />\n        </div>\n      ))}\n      <button onClick={handleSubmitAll}>Submit All</button>\n    </div>\n  );\n}\n\nexport default RutinaDetail;*/}"],"mappings":"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AC,CAAE;QACxEM,MAAM,EAAEA,CAAA,KAAMA,MAAM,CAACR,aAAa;MAAE,GAH/BA,aAAa;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAInB,CAAC;IAAA,GAPMxB,aAAa;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAQlB,CAEJ,CAAC,eAEFzC,OAAA;MAAQ0C,OAAO,EAAEf,eAAgB;MAAAU,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClD,CAAC;AAEV;AAACtC,EAAA,CAtFQF,YAAY;AAAA0C,EAAA,GAAZ1C,YAAY;AAwFrB,eAAeA,YAAY;AAI3B,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAzBC;AA2BD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAlFC;AAuF8B,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}