{"ast":null,"code":"var _jsxFileName = \"/home/feli/Desktop/prog/posts/client/src/components/RutinaDetail.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useState } from 'react';\nimport axios from 'axios';\nimport ExerciseForm from './ExerciseForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RutinaDetail(ejercicios) {\n  _s();\n  const exercisesArray = ejercicios.props;\n  console.log(exercisesArray);\n  const [formData, setFormData] = useState(exercisesArray.map(() => ({\n    sets: '',\n    reps: '',\n    weight: ''\n  })));\n\n  // Function to handle changes to any form input\n  const handleChange = (index, e) => {\n    const newFormData = [...formData];\n    newFormData[index] = {\n      ...newFormData[index],\n      [e.target.name]: e.target.value\n    };\n    setFormData(newFormData);\n  };\n\n  // Function to handle form submission\n  const handleSubmitAll = async e => {\n    e.preventDefault();\n    try {\n      // Map over the exercises and form data to create an array of promises\n      const promises = exercisesArray.map((exercise, index) => axios.post('/api/workouts', {\n        exercise,\n        ...formData[index]\n      }));\n      // Wait for all promises to resolve\n      const responses = await Promise.all(promises);\n      console.log(responses.map(res => res.data));\n      // Optionally, clear the form after submission\n      setFormData(formData.map(() => ({\n        sets: '',\n        reps: '',\n        weight: ''\n      })));\n    } catch (error) {\n      console.error('Error submitting workouts:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [exercisesArray.map((ejercicio, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: ejercicio\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(ExerciseForm, {\n        exercise: ejercicio\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmitAll,\n      children: \"Submit All\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 12\n  }, this);\n}\n_s(RutinaDetail, \"RsB+Z3VlcIe1+Tx5Z9LMBij80e4=\");\n_c = RutinaDetail;\nexport default RutinaDetail;\n{/*\n <h2>{ejercicio}</h2>\n      <form>\n      <input\n        type=\"number\"\n        name=\"sets\"\n        placeholder=\"Sets\"\n        value={formData.sets}\n        onChange={(e) => handleChange(index, e)}\n      />\n      <input\n        type=\"number\"\n        name=\"reps\"\n        placeholder=\"Reps\"\n        value={formData.reps}\n        onChange={(e) => handleChange(index, e)}\n      />\n      <input\n        type=\"number\"\n        name=\"weight\"\n        placeholder=\"Weight\"\n        value={formData.weight}\n        onChange={(e) => handleChange(index, e)}\n      />\n    </form>\n */}\n{/*import React, { useState } from 'react';\n import axios from 'axios';\n const FormEjercicios = ({ exercise, onChange, formData }) => {\n  return (\n    <form>\n      <input\n        type=\"number\"\n        name=\"sets\"\n        placeholder=\"Sets\"\n        value={formData.sets}\n        onChange={onChange}\n      />\n      <input\n        type=\"number\"\n        name=\"reps\"\n        placeholder=\"Reps\"\n        value={formData.reps}\n        onChange={onChange}\n      />\n      <input\n        type=\"number\"\n        name=\"weight\"\n        placeholder=\"Weight\"\n        value={formData.weight}\n        onChange={onChange}\n      />\n    </form>\n  );\n };\n \n function RutinaDetail({ ejercicios }) {\n  // Initialize state to hold form data for each exercise\n  const ejerciciosArray = ejercicios.props\n  \n  const [formData, setFormData] = useState(\n    ejerciciosArray.map(() => ({ sets: '', reps: '', weight: '' }))\n  );\n   // Function to handle changes to any form input\n  const handleChange = (index, e) => {\n    const newFormData = [...formData];\n    newFormData[index] = {\n      ...newFormData[index],\n      [e.target.name]: e.target.value\n    };\n    setFormData(newFormData);\n  };\n   // Function to handle form submission\n  const handleSubmitAll = async (e) => {\n    e.preventDefault();\n    try {\n      // Map over the exercises and form data to create an array of promises\n      const promises = ejerciciosArray.map((exercise, index) =>\n        axios.post('/api/workouts', {\n          exercise,\n          ...formData[index]\n        })\n      );\n      // Wait for all promises to resolve\n      const responses = await Promise.all(promises);\n      console.log(responses.map(res => res.data));\n      // Optionally, clear the form after submission\n      setFormData(formData.map(() => ({ sets: '', reps: '', weight: '' })));\n    } catch (error) {\n      console.error('Error submitting workouts:', error);\n    }\n  };\n   return (\n    <div>\n      {ejerciciosArray.map((ejercicio, index) => (\n        <div key={index}>\n          <h2>{ejercicio}</h2>\n          <FormEjercicios\n            exercise={ejercicio}\n            formData={formData[index]}\n            onChange={(e) => handleChange(index, e)}\n          />\n        </div>\n      ))}\n      <button onClick={handleSubmitAll}>Submit All</button>\n    </div>\n  );\n }\n export default RutinaDetail;*/}\nvar _c;\n$RefreshReg$(_c, \"RutinaDetail\");","map":{"version":3,"names":["React","useState","axios","ExerciseForm","jsxDEV","_jsxDEV","RutinaDetail","ejercicios","_s","exercisesArray","props","console","log","formData","setFormData","map","sets","reps","weight","handleChange","index","e","newFormData","target","name","value","handleSubmitAll","preventDefault","promises","exercise","post","responses","Promise","all","res","data","error","children","ejercicio","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/feli/Desktop/prog/posts/client/src/components/RutinaDetail.jsx"],"sourcesContent":["import React from 'react'\nimport { useState } from 'react';\nimport axios from 'axios';\nimport ExerciseForm from './ExerciseForm';\n\nfunction RutinaDetail(ejercicios) {\n  const exercisesArray = ejercicios.props\n\n  console.log(exercisesArray)\n  const [formData, setFormData] = useState(\n    exercisesArray.map(() => ({ sets: '', reps: '', weight: '' }))\n  );\n\n  // Function to handle changes to any form input\n  const handleChange = (index, e) => {\n    const newFormData = [...formData];\n    newFormData[index] = {\n      ...newFormData[index],\n      [e.target.name]: e.target.value\n    };\n    setFormData(newFormData);\n  };\n\n  // Function to handle form submission\n  const handleSubmitAll = async (e) => {\n    e.preventDefault();\n    try {\n      // Map over the exercises and form data to create an array of promises\n      const promises = exercisesArray.map((exercise, index) =>\n        axios.post('/api/workouts', {\n          exercise,\n          ...formData[index]\n        })\n      );\n      // Wait for all promises to resolve\n      const responses = await Promise.all(promises);\n      console.log(responses.map(res => res.data));\n      // Optionally, clear the form after submission\n      setFormData(formData.map(() => ({ sets: '', reps: '', weight: '' })));\n    } catch (error) {\n      console.error('Error submitting workouts:', error);\n    }\n  };\n\n  return ( <div>\n    {exercisesArray.map((ejercicio, index) => (\n    <div key={index}>\n      <h2>{ejercicio}</h2>\n      <ExerciseForm exercise={ejercicio} />\n    </div>)\n    )}\n\n<button onClick={handleSubmitAll}>Submit All</button>\n  </div>\n  )\n}\n\nexport default RutinaDetail\n\n\n\n{/*\n<h2>{ejercicio}</h2>\n      <form>\n      <input\n        type=\"number\"\n        name=\"sets\"\n        placeholder=\"Sets\"\n        value={formData.sets}\n        onChange={(e) => handleChange(index, e)}\n      />\n      <input\n        type=\"number\"\n        name=\"reps\"\n        placeholder=\"Reps\"\n        value={formData.reps}\n        onChange={(e) => handleChange(index, e)}\n      />\n      <input\n        type=\"number\"\n        name=\"weight\"\n        placeholder=\"Weight\"\n        value={formData.weight}\n        onChange={(e) => handleChange(index, e)}\n      />\n    </form>\n*/}\n\n{/*import React, { useState } from 'react';\nimport axios from 'axios';\nconst FormEjercicios = ({ exercise, onChange, formData }) => {\n  return (\n    <form>\n      <input\n        type=\"number\"\n        name=\"sets\"\n        placeholder=\"Sets\"\n        value={formData.sets}\n        onChange={onChange}\n      />\n      <input\n        type=\"number\"\n        name=\"reps\"\n        placeholder=\"Reps\"\n        value={formData.reps}\n        onChange={onChange}\n      />\n      <input\n        type=\"number\"\n        name=\"weight\"\n        placeholder=\"Weight\"\n        value={formData.weight}\n        onChange={onChange}\n      />\n    </form>\n  );\n};\n\n\nfunction RutinaDetail({ ejercicios }) {\n  // Initialize state to hold form data for each exercise\n  const ejerciciosArray = ejercicios.props\n  \n  const [formData, setFormData] = useState(\n    ejerciciosArray.map(() => ({ sets: '', reps: '', weight: '' }))\n  );\n\n  // Function to handle changes to any form input\n  const handleChange = (index, e) => {\n    const newFormData = [...formData];\n    newFormData[index] = {\n      ...newFormData[index],\n      [e.target.name]: e.target.value\n    };\n    setFormData(newFormData);\n  };\n\n  // Function to handle form submission\n  const handleSubmitAll = async (e) => {\n    e.preventDefault();\n    try {\n      // Map over the exercises and form data to create an array of promises\n      const promises = ejerciciosArray.map((exercise, index) =>\n        axios.post('/api/workouts', {\n          exercise,\n          ...formData[index]\n        })\n      );\n      // Wait for all promises to resolve\n      const responses = await Promise.all(promises);\n      console.log(responses.map(res => res.data));\n      // Optionally, clear the form after submission\n      setFormData(formData.map(() => ({ sets: '', reps: '', weight: '' })));\n    } catch (error) {\n      console.error('Error submitting workouts:', error);\n    }\n  };\n\n  return (\n    <div>\n      {ejerciciosArray.map((ejercicio, index) => (\n        <div key={index}>\n          <h2>{ejercicio}</h2>\n          <FormEjercicios\n            exercise={ejercicio}\n            formData={formData[index]}\n            onChange={(e) => handleChange(index, e)}\n          />\n        </div>\n      ))}\n      <button onClick={handleSubmitAll}>Submit All</button>\n    </div>\n  );\n}\n\nexport default RutinaDetail;*/}"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,YAAY,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,SAASC,YAAYA,CAACC,UAAU,EAAE;EAAAC,EAAA;EAChC,MAAMC,cAAc,GAAGF,UAAU,CAACG,KAAK;EAEvCC,OAAO,CAACC,GAAG,CAACH,cAAc,CAAC;EAC3B,MAAM,CAACI,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CACtCQ,cAAc,CAACM,GAAG,CAAC,OAAO;IAAEC,IAAI,EAAE,EAAE;IAAEC,IAAI,EAAE,EAAE;IAAEC,MAAM,EAAE;EAAG,CAAC,CAAC,CAC/D,CAAC;;EAED;EACA,MAAMC,YAAY,GAAGA,CAACC,KAAK,EAAEC,CAAC,KAAK;IACjC,MAAMC,WAAW,GAAG,CAAC,GAAGT,QAAQ,CAAC;IACjCS,WAAW,CAACF,KAAK,CAAC,GAAG;MACnB,GAAGE,WAAW,CAACF,KAAK,CAAC;MACrB,CAACC,CAAC,CAACE,MAAM,CAACC,IAAI,GAAGH,CAAC,CAACE,MAAM,CAACE;IAC5B,CAAC;IACDX,WAAW,CAACQ,WAAW,CAAC;EAC1B,CAAC;;EAED;EACA,MAAMI,eAAe,GAAG,MAAOL,CAAC,IAAK;IACnCA,CAAC,CAACM,cAAc,CAAC,CAAC;IAClB,IAAI;MACF;MACA,MAAMC,QAAQ,GAAGnB,cAAc,CAACM,GAAG,CAAC,CAACc,QAAQ,EAAET,KAAK,KAClDlB,KAAK,CAAC4B,IAAI,CAAC,eAAe,EAAE;QAC1BD,QAAQ;QACR,GAAGhB,QAAQ,CAACO,KAAK;MACnB,CAAC,CACH,CAAC;MACD;MACA,MAAMW,SAAS,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACL,QAAQ,CAAC;MAC7CjB,OAAO,CAACC,GAAG,CAACmB,SAAS,CAAChB,GAAG,CAACmB,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC;MAC3C;MACArB,WAAW,CAACD,QAAQ,CAACE,GAAG,CAAC,OAAO;QAAEC,IAAI,EAAE,EAAE;QAAEC,IAAI,EAAE,EAAE;QAAEC,MAAM,EAAE;MAAG,CAAC,CAAC,CAAC,CAAC;IACvE,CAAC,CAAC,OAAOkB,KAAK,EAAE;MACdzB,OAAO,CAACyB,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACpD;EACF,CAAC;EAED,oBAAS/B,OAAA;IAAAgC,QAAA,GACN5B,cAAc,CAACM,GAAG,CAAC,CAACuB,SAAS,EAAElB,KAAK,kBACrCf,OAAA;MAAAgC,QAAA,gBACEhC,OAAA;QAAAgC,QAAA,EAAKC;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACpBrC,OAAA,CAACF,YAAY;QAAC0B,QAAQ,EAAES;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA,GAF7BtB,KAAK;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGV,CACL,CAAC,eAELrC,OAAA;MAAQsC,OAAO,EAAEjB,eAAgB;MAAAW,QAAA,EAAC;IAAU;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9C,CAAC;AAER;AAAClC,EAAA,CAlDQF,YAAY;AAAAsC,EAAA,GAAZtC,YAAY;AAoDrB,eAAeA,YAAY;AAI3B,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAzBC;AA2BD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAlFC;AAuF8B,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}